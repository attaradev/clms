name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (must match a GitHub Environment)"
        required: false
        default: production
      ref:
        description: "Git ref to deploy (SHA or tag). Defaults to current commit"
        required: false

permissions:
  contents: read
  actions: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_NAMESPACE: ${{ secrets.DOCKERHUB_NAMESPACE }}
      SECRET_COOKIE_PASSWORD: ${{ secrets.SECRET_COOKIE_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: web
            repo: clms-web
            context: ./front-end
            file: ./front-end/Dockerfile
            needsSecret: true
          - name: api
            repo: clms-api
            context: .
            file: ./back-end/dockerfiles/php.app.dockerfile
            needsSecret: false
          - name: proxy
            repo: clms-proxy
            context: ./back-end
            file: ./back-end/dockerfiles/nginx.app.dockerfile
            needsSecret: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine build platforms
        id: plat
        run: |
          # Build both amd64+arm64 for tags; amd64 only for branch pushes
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (${{ matrix.name }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_NAMESPACE }}/${{ matrix.repo }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=tag

      - name: Build and push (with secret)
        if: matrix.needsSecret == true
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          platforms: ${{ steps.plat.outputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}
          provenance: false
          secrets: |
            id=secret_cookie_password,env=SECRET_COOKIE_PASSWORD

      - name: Build and push
        if: matrix.needsSecret == false
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          platforms: ${{ steps.plat.outputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.name }}
          provenance: false

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-and-push
    # Deploy only on push to main, or when manually dispatched
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare remote path
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script_stop: true
          script: |
            set -euo pipefail
            export DEPLOY_PATH=${{ secrets.REMOTE_PATH }}
            sudo mkdir -p "$DEPLOY_PATH" "$DEPLOY_PATH/back-end" "$DEPLOY_PATH/letsencrypt"
            REMOTE_USER=$(id -un)
            sudo chown -R "$REMOTE_USER":"$REMOTE_USER" "$DEPLOY_PATH" || true
            sudo chmod -R u+rwX,go+rX "$DEPLOY_PATH" || true
            # Ensure ACME storage file exists with strict permissions
            sudo touch "$DEPLOY_PATH/letsencrypt/acme.json"
            sudo chmod 600 "$DEPLOY_PATH/letsencrypt/acme.json" || true

      - name: Upload compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "compose.prod.yml"
          target: "${{ secrets.REMOTE_PATH }}"

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script_stop: true
          script: |
            set -euo pipefail
            export DOCKERHUB_NAMESPACE=${{ secrets.DOCKERHUB_NAMESPACE }}
            export SECRET_COOKIE_PASSWORD=${{ secrets.SECRET_COOKIE_PASSWORD }}
            # Deploy images tagged with this commit (sha-<shortsha>), or a manual ref if provided
            export GIT_REF=${{ github.event_name == 'workflow_dispatch' && (inputs.ref != '' && inputs.ref || github.sha) || github.sha }}
            SHORT_SHA="${GIT_REF:0:7}"
            export TAG="sha-${SHORT_SHA}"
            export DEPLOY_PATH=${{ secrets.REMOTE_PATH }}
            # DOMAIN_NAME from secret, fallback to default
            export DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            if [ -z "${DOMAIN_NAME:-}" ]; then DOMAIN_NAME="clms.attara.dev"; fi
            # Optional: allow secret override; else default to a syntactically valid email for ACME
            export ACME_EMAIL=${{ secrets.ACME_EMAIL }}
            if [ -z "${ACME_EMAIL:-}" ]; then ACME_EMAIL="admin@${DOMAIN_NAME}"; fi
            

            # Ensure compose env file exists so manual compose commands don't warn
            if [ -z "${SECRET_COOKIE_PASSWORD}" ]; then
              SECRET_COOKIE_PASSWORD="$(openssl rand -base64 48)"
            fi
            printf '%s\n' \
              "DOCKERHUB_NAMESPACE=${DOCKERHUB_NAMESPACE}" \
              "TAG=${TAG}" \
              "SECRET_COOKIE_PASSWORD=${SECRET_COOKIE_PASSWORD}" \
              "DOMAIN_NAME=${DOMAIN_NAME}" \
              "ACME_EMAIL=${ACME_EMAIL}" \
              | sudo tee "$DEPLOY_PATH/.env" > /dev/null

            # Ensure back-end/.env exists server-side (generate sensible defaults if missing)
            if [ ! -f "$DEPLOY_PATH/back-end/.env" ]; then
              echo "Generating $DEPLOY_PATH/back-end/.env ..."
              APP_KEY=$( (head -c 32 /dev/urandom | base64) 2>/dev/null || openssl rand -base64 32 )
              [ -n "$APP_KEY" ] || APP_KEY="$(date +%s | sha256sum | head -c 32 | base64)"
              printf '%s\n' \
                "APP_NAME=CLMS" \
                "APP_ENV=production" \
                "APP_KEY=base64:${APP_KEY}" \
                "APP_DEBUG=false" \
                "APP_URL=http://localhost" \
                "" \
                "LOG_CHANNEL=stack" \
                "LOG_LEVEL=info" \
                "" \
                "DB_CONNECTION=pgsql" \
                "DB_HOST=db" \
                "DB_PORT=5432" \
                "DB_DATABASE=clms" \
                "DB_USERNAME=clms" \
                "DB_PASSWORD=clms" \
                "" \
                "BROADCAST_DRIVER=log" \
                "CACHE_DRIVER=file" \
                "FILESYSTEM_DISK=local" \
                "QUEUE_CONNECTION=database" \
                "SESSION_DRIVER=file" \
                "SESSION_LIFETIME=120" \
                "" \
                "REDIS_HOST=redis" \
                "REDIS_PASSWORD=null" \
                "REDIS_PORT=6379" \
                "" \
                "SANCTUM_STATEFUL_DOMAINS=" \
                "SESSION_DOMAIN=" \
                | sudo tee "$DEPLOY_PATH/back-end/.env" > /dev/null
            fi

            cd "$DEPLOY_PATH"
            
            sudo env DOCKERHUB_NAMESPACE="$DOCKERHUB_NAMESPACE" TAG="$TAG" SECRET_COOKIE_PASSWORD="$SECRET_COOKIE_PASSWORD" DOMAIN_NAME="$DOMAIN_NAME" \
              docker compose -f compose.prod.yml pull || true
            
            sudo env DOCKERHUB_NAMESPACE="$DOCKERHUB_NAMESPACE" TAG="$TAG" SECRET_COOKIE_PASSWORD="$SECRET_COOKIE_PASSWORD" DOMAIN_NAME="$DOMAIN_NAME" \
              docker compose -f compose.prod.yml up -d --remove-orphans

            # Run database migrations and seed default admin (idempotent)
            sudo env DOCKERHUB_NAMESPACE="$DOCKERHUB_NAMESPACE" TAG="$TAG" SECRET_COOKIE_PASSWORD="$SECRET_COOKIE_PASSWORD" DOMAIN_NAME="$DOMAIN_NAME" \
              docker compose -f compose.prod.yml exec -T api php artisan migrate --force
            sudo env DOCKERHUB_NAMESPACE="$DOCKERHUB_NAMESPACE" TAG="$TAG" SECRET_COOKIE_PASSWORD="$SECRET_COOKIE_PASSWORD" DOMAIN_NAME="$DOMAIN_NAME" \
              docker compose -f compose.prod.yml exec -T api php artisan db:seed --force

            
            PREV_TAG_FILE="$DEPLOY_PATH/.release"
            PREV_TAG=""
            if [ -f "$PREV_TAG_FILE" ]; then PREV_TAG="$(cat "$PREV_TAG_FILE" 2>/dev/null || true)"; fi

            # Health check via Traefik ping endpoint (local-only)
            set +e
            for i in $(seq 1 20); do
              code=$(curl -sS -o /dev/null -w '%{http_code}' http://127.0.0.1:8080/ping || true)
              if [ "$code" = "200" ] || [ "$code" = "302" ]; then ok=1; break; fi
              sleep 3
            done
            set -e

            if [ "${ok:-0}" != 1 ]; then
              echo "Health check failed for TAG=$TAG" >&2
              if [ -n "$PREV_TAG" ]; then
                echo "Rolling back to previous release $PREV_TAG" >&2
                sudo env DOCKERHUB_NAMESPACE="$DOCKERHUB_NAMESPACE" TAG="$PREV_TAG" SECRET_COOKIE_PASSWORD="$SECRET_COOKIE_PASSWORD" \
                  docker compose -f compose.prod.yml up -d
                exit 1
              fi
            fi

            echo "$TAG" | sudo tee "$PREV_TAG_FILE" >/dev/null
            sudo docker image prune -f || true
